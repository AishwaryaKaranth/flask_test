# -*- coding: utf-8 -*-
"""flask_test934.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IcQ4q1HsXFnVnor_ZVfmbtLvxA-xRrqU
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import PIL
from PIL import Image,ImageFilter
import cv2
import keras
from keras.models import Sequential, Model
from keras.layers.core import Flatten, Dense, Dropout, Lambda, Reshape
from keras.layers import Input
from keras.layers.convolutional import Convolution2D, MaxPooling2D, ZeroPadding2D
from keras.layers import Conv2D, MaxPooling2D, Activation
from keras.optimizers import Adam



def ConvLayers(layers, model, filters):
  for i in range(layers):
    model.add(ZeroPadding2D((1,1)))
    model.add(Convolution2D(filters, 3,3,activation='relu'))
  model.add(MaxPooling2D((2,2),strides=(1,1),padding="same"))
def FCLayers(model):
  model.add(Dense(4096, activation='relu'))
  model.add(Dropout(0.5))
def VGG16_arc():
  model=Sequential()
  ConvLayers(2,model,64)
  ConvLayers(2,model,128)
  ConvLayers(3,model,256)
  ConvLayers(3,model,512)
  ConvLayers(3,model,512)
  model.add(Flatten())
  FCLayers(model)
  FCLayers(model)
  model.add(Dense(37,activation='sigmoid'))
  #model.add(Dense(3,activation='softmax'))
  return model

optimizer = Adam(learning_rate=0.001, decay=5e-4)
model = VGG16_arc()
model.compile(loss='mean_squared_error', optimizer=optimizer, metrics=['accuracy'])

model.build(input_shape=(None,224,224,3))

model.load_weights('/models/thirdrunweights.hdf5')

def preprocessing(imagepath):
  img=Image.open(imagepath)
  resized=img.resize((224,224))
  medfil=resized.filter(ImageFilter.MedianFilter(size = 3)) 
  open_cv_image = np.array(medfil) 
  # Convert RGB to BGR 
  open_cv_image = open_cv_image[:, :, ::-1].copy() 
  ycb=cv2.cvtColor(open_cv_image,cv2.COLOR_BGR2LAB) # Converting RGB to LAB colorscale
  imgs=cv2.split(ycb)  # Splitting Channels of LAB Colorscale.
  clahe=cv2.createCLAHE(clipLimit=2.0,tileGridSize=(3,3)) # Creating CLAHE(Clip limit:sets threshhold for contrast limiting.)
  # tilegridesize:used for subimages for applying clahe.
  imgs[0]= clahe.apply(imgs[0]) # Applying Clahe on luminescence channel
  labimg=cv2.merge(imgs)   # Merging channels of LAB.
  labimg=cv2.cvtColor(labimg,cv2.COLOR_LAB2BGR) # Converting back LAB to RGB color scale in BGR format
  RGBimage = labimg[...,::-1] #BGR to RGB
  return RGBimage

from keras.preprocessing.image import load_img
from keras.preprocessing.image import img_to_array

def prediction(image):
  img_array = img_to_array(image)
  img_batch = np.expand_dims(img_array, axis=0)
  predictarray=model.predict(img_batch)
  return predictarray

predictarray=prediction(image)

classes = ['Class1.1', 'Class1.2', 'Class1.3', 'Class2.1', 'Class2.2', 'Class3.1','Class3.2', 'Class4.1', 'Class4.2', 'Class5.1', 'Class5.2', 'Class5.3','Class5.4', 'Class6.1', 'Class6.2', 'Class7.1', 'Class7.2', 'Class7.3','Class8.1', 'Class8.2', 'Class8.3', 'Class8.4', 'Class8.5', 'Class8.6', 'Class8.7', 'Class9.1', 'Class9.2', 'Class9.3', 'Class10.1', 'Class10.2', 'Class10.3', 'Class11.1', 'Class11.2', 'Class11.3', 'Class11.4', 'Class11.5', 'Class11.6'
]

def class7():
  if ((predictdf['Class7.1']>predictdf['Class7.2']) & (predictdf['Class7.1']>predictdf['Class7.3'])).any():
    print('The Galaxy Is Completely Round')
    class6()
  elif ((predictdf['Class7.2']>predictdf['Class7.1']) & (predictdf['Class7.2']>predictdf['Class7.3'])).any():
    print('The Galaxy Is Neither Completely Round Nor Cigar Shaped (In Between)')
    class6()
  elif ((predictdf['Class7.3']>predictdf['Class7.1']) & (predictdf['Class7.3']>predictdf['Class7.2'])).any():
    print('The Galaxy Is Cigar Shaped')
    class6()

def class6():
  if (predictdf['Class6.1']>predictdf['Class6.2']).any():
    class8()
  elif (predictdf['Class6.2']>predictdf['Class6.1']).any():
    print('The Galaxy Has No Odd Feature')
def class8():
  if ((predictdf['Class8.1']>predictdf['Class8.2']) & (predictdf['Class8.1']>predictdf['Class8.3']) & (predictdf['Class8.1']>predictdf['Class8.4']) & (predictdf['Class8.1']>predictdf['Class8.5']) & (predictdf['Class8.1']>predictdf['Class8.6']) & (predictdf['Class8.1']>predictdf['Class8.7'])).any():
    print('Odd Feature - Ring')
  elif ((predictdf['Class8.2']>predictdf['Class8.1']) & (predictdf['Class8.2']>predictdf['Class8.3']) & (predictdf['Class8.2']>predictdf['Class8.4']) & (predictdf['Class8.2']>predictdf['Class8.5']) & (predictdf['Class8.2']>predictdf['Class8.6']) & (predictdf['Class8.2']>predictdf['Class8.7'])).any():
    print('Odd Feature - Lens Or Arc')
  elif ((predictdf['Class8.3']>predictdf['Class8.1']) & (predictdf['Class8.3']>predictdf['Class8.2']) & (predictdf['Class8.3']>predictdf['Class8.4']) & (predictdf['Class8.3']>predictdf['Class8.5']) & (predictdf['Class8.3']>predictdf['Class8.6']) & (predictdf['Class8.3']>predictdf['Class8.7'])).any():
    print('Odd Feature - Disturbed')
  elif ((predictdf['Class8.4']>predictdf['Class8.1']) & (predictdf['Class8.4']>predictdf['Class8.2']) & (predictdf['Class8.4']>predictdf['Class8.3']) & (predictdf['Class8.4']>predictdf['Class8.5']) & (predictdf['Class8.4']>predictdf['Class8.6']) & (predictdf['Class8.4']>predictdf['Class8.7'])).any():
    print('Odd Feature - Irregular')
  elif ((predictdf['Class8.5']>predictdf['Class8.1']) & (predictdf['Class8.5']>predictdf['Class8.2']) & (predictdf['Class8.5']>predictdf['Class8.3']) & (predictdf['Class8.5']>predictdf['Class8.4']) & (predictdf['Class8.5']>predictdf['Class8.6']) & (predictdf['Class8.5']>predictdf['Class8.7'])).any():
    print('Odd Feature - Other')
  elif ((predictdf['Class8.6']>predictdf['Class8.1']) & (predictdf['Class8.6']>predictdf['Class8.2']) & (predictdf['Class8.6']>predictdf['Class8.3']) & (predictdf['Class8.6']>predictdf['Class8.4']) & (predictdf['Class8.6']>predictdf['Class8.5']) & (predictdf['Class8.6']>predictdf['Class8.7'])).any():
    print('Odd Feature - Merger')
  elif ((predictdf['Class8.7']>predictdf['Class8.1']) & (predictdf['Class8.7']>predictdf['Class8.2']) & (predictdf['Class8.7']>predictdf['Class8.3']) & (predictdf['Class8.7']>predictdf['Class8.4']) & (predictdf['Class8.7']>predictdf['Class8.5']) & (predictdf['Class8.7']>predictdf['Class8.6'])).any():
    print('Odd Feature - Dust Lane')

def class2():
  if (predictdf['Class2.1']>predictdf['Class2.2']).any():
    print('The Disk Can Be Viewed Edge-on')
    class9()
  elif (predictdf['Class2.2']>predictdf['Class2.1']).any():
    print('The Disk Cannot Be Viewed Edge-on')
    class3()

def class9():
  if ((predictdf['Class9.1']>predictdf['Class9.2']) & (predictdf['Class9.1']>predictdf['Class9.3'])).any():
    print('The Galaxy Has A Rounded Bulge At Its Centre')
    class6()
  elif ((predictdf['Class9.2']>predictdf['Class9.1']) & (predictdf['Class9.2']>predictdf['Class9.3'])).any():
    print('The Galaxy Has A Boxy Bulge At Its Centre')
    class6()
  elif ((predictdf['Class9.3']>predictdf['Class9.1']) & (predictdf['Class9.3']>predictdf['Class9.2'])).any():
    print('The Galaxy Has No Bulge At Its Centre ')
    class6()
  
def class3():
  if (predictdf['Class3.1']>predictdf['Class3.2']).any():
    print('There Is A Sign Of A Bar Feature Through The Centre Of The Galaxy')
    class4()
  elif (predictdf['Class3.2']>predictdf['Class3.1']).any():
    print('There Is No Sign Of A Bar Feature Through The Centre Of The Galaxy')
    class4()
  
def class4():
  if (predictdf['Class4.1']>predictdf['Class4.2']).any():
    print('There Is A Sign Of A Spiral Arm Pattern')
    class10()
  elif (predictdf['Class4.2']>predictdf['Class4.1']).any():
    print('There Is No Sign Of A Spiral Arm Pattern')
    class5()

def class10():
  if ((predictdf['Class10.1']>predictdf['Class10.2']) & (predictdf['Class10.1']>predictdf['Class10.3'])).any():
    print('The Spiral Arms Appear To Be Tightly Wound')
    class11()
  elif ((predictdf['Class10.2']>predictdf['Class10.1']) & (predictdf['Class10.2']>predictdf['Class10.3'])).any():
    print('The Spiral Arms Appear To Be Neither Tightly Nor Loosely Wound (Medium)')
    class11()
  elif ((predictdf['Class10.3']>predictdf['Class10.1']) & (predictdf['Class10.3']>predictdf['Class10.2'])).any():
    print('The Spiral Arms Appear To Be Loosely Wound')
    class11()

def class5():
  if ((predictdf['Class5.1']>predictdf['Class5.2']) & (predictdf['Class5.1']>predictdf['Class5.3']) & (predictdf['Class5.1']>predictdf['Class5.4'])).any():
    print('The Galaxy Has No Central Bulge')
    class6()
  elif ((predictdf['Class5.2']>predictdf['Class5.1']) & (predictdf['Class5.2']>predictdf['Class5.3']) & (predictdf['Class5.2']>predictdf['Class5.4'])).any():
    print('The Galaxy Has A Central Bulge That Is Just Noticeable')
    class6()
  elif ((predictdf['Class5.3']>predictdf['Class5.1']) & (predictdf['Class5.3']>predictdf['Class5.2']) & (predictdf['Class5.3']>predictdf['Class5.4'])).any():
    print('The Galaxy Has An Obvious Central Bulge')
    class6()
  elif ((predictdf['Class5.4']>predictdf['Class5.1']) & (predictdf['Class5.4']>predictdf['Class5.2']) & (predictdf['Class5.4']>predictdf['Class5.3'])).any():
    print('The Galaxy Has A Dominant Central Bulge')
    class6()

def class11():
  if ((predictdf['Class11.1']>predictdf['Class11.2']) & (predictdf['Class11.1']>predictdf['Class11.3']) & (predictdf['Class11.1']>predictdf['Class11.4']) & (predictdf['Class11.1']>predictdf['Class11.5']) & (predictdf['Class11.1']>predictdf['Class11.6'])).any():
    print('The Galaxy Has 1 Spiral Arm')
  elif ((predictdf['Class11.2']>predictdf['Class11.1']) & (predictdf['Class11.2']>predictdf['Class11.3']) & (predictdf['Class11.2']>predictdf['Class11.4']) & (predictdf['Class11.2']>predictdf['Class11.5']) & (predictdf['Class11.2']>predictdf['Class11.6'])).any():
    print('The Galaxy Has 2 Spiral Arms')
  elif ((predictdf['Class11.3']>predictdf['Class11.1']) & (predictdf['Class11.3']>predictdf['Class11.2']) & (predictdf['Class11.3']>predictdf['Class11.4']) & (predictdf['Class11.3']>predictdf['Class11.5']) & (predictdf['Class11.3']>predictdf['Class11.6'])).any():
    print('The Galaxy Has 3 Spiral Arms')
  elif ((predictdf['Class11.4']>predictdf['Class11.1']) & (predictdf['Class11.4']>predictdf['Class11.2']) & (predictdf['Class11.4']>predictdf['Class11.3']) & (predictdf['Class11.4']>predictdf['Class11.5']) & (predictdf['Class11.4']>predictdf['Class11.6'])).any():
    print('The Galaxy Has 4 Spiral Arms')
  elif ((predictdf['Class11.5']>predictdf['Class11.1']) & (predictdf['Class11.5']>predictdf['Class11.2']) & (predictdf['Class11.5']>predictdf['Class11.3']) & (predictdf['Class11.5']>predictdf['Class11.4']) & (predictdf['Class11.5']>predictdf['Class11.6'])).any():
    print('The Galaxy Has More Than 4 Spiral Arms')
  elif ((predictdf['Class11.6']>predictdf['Class11.1']) & (predictdf['Class11.6']>predictdf['Class11.2']) & (predictdf['Class11.6']>predictdf['Class11.3']) & (predictdf['Class11.6']>predictdf['Class11.4']) & (predictdf['Class11.6']>predictdf['Class11.5'])).any():
    print('The Number Of Spiral Arms That The Galaxy Has Is Indeterminable')
  
def getfeatures():
  print("The predicted features of the image are - \n")
  if ((predictdf['Class1.1']>predictdf['Class1.2']) & (predictdf['Class1.1']>predictdf['Class1.3'])).any():
    print('The Galaxy Is Smooth')
    class7()
  elif ((predictdf['Class1.2']>predictdf['Class1.1']) & (predictdf['Class1.2']>predictdf['Class1.3'])).any():
    print('The Galaxy Has Features/Disk')
    class2()
  elif ((predictdf['Class1.3']>predictdf['Class1.1']) & (predictdf['Class1.3']>predictdf['Class1.2'])).any():
    print('The Image Is Of A Star/Artifact')

from flask import Flask

import base64
import numpy as np
import io
from PIL import Image
from flask import request
from flask import jsonify
from keras.models import load_model

app=Flask(__name__)

@app.route('/')
def entry():
  return render_template('/templates/index.html')

@app.route('/predict', methods=['GET','POST'])
def render_features():
  saved_model='/models/thirdrunweights.hdf5'
  model=load_model(saved_model)
  message=request.get_json(force=True)
  encoded=message['image']
  decoded=base64.b64encode(encoded)
  image=Image.open(io.BytesIO(decoded))
  predict=moel.prediction(image)
  features=model.get_features()
  return render_template('/templates/index.html',
                         message=features,
                         image=image)



